#include "sniffer.hpp"
#include <arpa/inet.h>
#include <algorithm>
#include <cerrno>
#include <csignal>
#include <cstdio>
#include <cstring>
#include <fcntl.h>
#include <iostream>
#include <map>
#include <memory>
#include <netinet/in.h>
#include <set>
#include <sstream>
#include <string>
#include <sys/socket.h>
#include <sys/time.h>
#include <thread>
#include <unistd.h>
#include <vector>

using namespace sniffer;

static const char* INDEX_HTML = R"HTML(<!DOCTYPE html><html lang="ru"><head><meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1"><title>PacketSniffer</title><link rel="stylesheet" href="/static/styles.css"></head><body><div class="container"><header><div class="title">PacketSniffer</div><div class="author"><a href="https://github.com/BengaminButton" target="_blank">Автор: BengaminButton</a></div></header><main><section class="quick"><h2>Быстрый старт</h2><div class="row"><div class="col"><label>Интерфейс</label><select id="iface"></select><button id="autoface">Определить</button></div><div class="col"><label>Режим</label><select id="mode"><option value="all">Всё</option><option value="web">Веб-трафик</option><option value="dns">DNS</option><option value="icmp">ICMP</option><option value="lan">Только локальная сеть</option></select></div><div class="col actions"><button id="start">Старт мониторинга</button><button id="stop">Стоп</button></div></div><details class="adv"><summary>Расширенные настройки</summary><div class="grid2"><div><label>BPF фильтр</label><input id="bpf" placeholder="tcp or udp or icmp"></div><div><label>Snaplen</label><input id="snaplen" type="number" value="65535"></div><div><label>Timeout, мс</label><input id="timeout" type="number" value="1000"></div><div><label><input id="promisc" type="checkbox" checked> Promiscuous</label></div><div><label><input id="monitor" type="checkbox"> Monitor mode</label></div><div><label>Чтение pcap</label><input id="pcap_in" placeholder="путь к .pcap"></div><div><label>Запись pcap</label><input id="pcap_out" placeholder="out.pcap"></div><div><label>GeoIP DB</label><input id="geoip" placeholder="/usr/share/GeoIP/GeoLite2-Country.mmdb"></div></div></details></section><section class="live"><h2>Лайв мониторинг</h2><div class="status" id="status">Статус: остановлен</div><div class="cards"><div class="card"><div class="k">Пакеты</div><div class="v" id="pkts">0</div></div><div class="card"><div class="k">Байт</div><div class="v" id="bytes">0</div></div><div class="card"><div class="k">TCP</div><div class="v" id="tcp">0</div></div><div class="card"><div class="k">UDP</div><div class="v" id="udp">0</div></div><div class="card"><div class="k">ICMP</div><div class="v" id="icmp">0</div></div><div class="card"><div class="k">PPS</div><div class="v" id="pps">0</div></div><div class="card"><div class="k">bps</div><div class="v" id="bps">0</div></div></div><canvas id="chart" height="160"></canvas></section><section class="tops"><h2>Топ хостов</h2><div id="toplist"></div></section><section class="guide"><h2>Руководство</h2><ol><li>Нажмите Определить, чтобы выбрать интерфейс автоматически.</li><li>Выберите режим. Для новичков подойдёт «Всё».</li><li>Нажмите Старт мониторинга. График и счётчики обновляются каждую секунду.</li><li>Нажмите Стоп для завершения. Для продвинутых доступны «Расширенные настройки».</li></ol></section></main></div><script src="/static/app.js"></script></body></html>)HTML";

static const char* STYLES_CSS = R"CSS(:root{--bg:#0f1116;--bg2:#1a1d24;--fg:#e6edf3;--muted:#9da3ae;--accent:#5ad4e6;--danger:#ff6b6b;--ok:#22c55e;--card:#141821;--border:#2b2f3a}*{box-sizing:border-box}html,body{height:100%}body{margin:0;background:linear-gradient(180deg,var(--bg),#0d0f14);color:var(--fg);font:14px/1.5 -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Ubuntu,Cantarell,Noto Sans,sans-serif}.container{max-width:1100px;margin:0 auto;padding:24px}header{display:flex;justify-content:space-between;align-items:center;margin-bottom:16px}.title{font-size:24px;color:var(--accent);font-weight:700}.author a{color:var(--muted);text-decoration:none}.author a:hover{color:var(--fg)}main{display:grid;gap:16px;grid-template-columns:1fr}section{background:var(--card);border:1px solid var(--border);border-radius:12px;padding:16px}h2{margin:0 0 12px 0;font-size:16px;color:var(--fg)}.row{display:flex;gap:12px;align-items:end}.col{display:flex;flex-direction:column;gap:6px;min-width:240px}.actions{flex:1;display:flex;gap:8px;justify-content:flex-end}label{color:var(--muted)}input,select,button{background:var(--bg2);color:var(--fg);border:1px solid var(--border);border-radius:8px;padding:8px 10px}button{cursor:pointer;border-color:transparent;background:linear-gradient(180deg,#1f2a37,#0f172a)}button:hover{filter:brightness(1.1)}.adv{margin-top:10px}.grid2{display:grid;grid-template-columns:repeat(4,1fr);gap:10px}.live .status{color:var(--muted);margin-bottom:10px}.cards{display:grid;grid-template-columns:repeat(7,1fr);gap:10px;margin-bottom:10px}.card{background:#0e121a;border:1px solid var(--border);border-radius:10px;padding:10px}.k{color:var(--muted);font-size:12px}.v{font-size:18px}.tops #toplist{display:grid;grid-template-columns:1fr 1fr;gap:10px}.toprow{display:flex;justify-content:space-between;border:1px solid var(--border);background:#0e121a;border-radius:8px;padding:8px}.muted{color:var(--muted)}@media(max-width:900px){.cards{grid-template-columns:repeat(3,1fr)}.grid2{grid-template-columns:1fr 1fr}.tops #toplist{grid-template-columns:1fr}})CSS";

static const char* APP_JS = R"JS(function(){const $=id=>document.getElementById(id);const mode=$('mode');const iface=$('iface');const startBtn=$('start');const statusEl=$('status');const chart=$('chart');const ctx=chart.getContext('2d');let pps=[],bps=[];function setStatus(t,err){statusEl.textContent=t;statusEl.style.color=err?'#ff6b6b':'#9da3ae'}function draw(){const w=chart.width=chart.clientWidth;const h=chart.height=chart.height;ctx.clearRect(0,0,w,h);function line(arr,color){if(arr.length<2)return;ctx.strokeStyle=color;ctx.lineWidth=2;ctx.beginPath();let n=arr.length;let max=Math.max(1,Math.max(...arr));for(let i=0;i<n;i++){const x=i*(w/(n-1));const y=h- (arr[i]/max)*h; if(i==0)ctx.moveTo(x,y);else ctx.lineTo(x,y);}ctx.stroke();}line(pps,'#5ad4e6');line(bps,'#22c55e')}function presetToBpf(v){if(v==='web')return 'tcp port 80 or tcp port 443';if(v==='dns')return 'udp port 53 or tcp port 53';if(v==='icmp')return 'icmp or icmp6';if(v==='lan')return '(net 10.0.0.0/8) or (net 172.16.0.0/12) or (net 192.168.0.0/16)';return ''}async function devices(){const r=await fetch('/api/devices');return await r.json()}async function autoiface(){const r=await fetch('/api/auto_iface');return await r.text()}async function state(){const r=await fetch('/api/state');return await r.json()}async function stats(){const r=await fetch('/api/stats');return await r.json()}async function summary(){const r=await fetch('/api/summary');return await r.json()}async function fillIfaces(){try{const list=await devices();iface.innerHTML='';list.forEach(n=>{const o=document.createElement('option');o.value=n;o.textContent=n;iface.appendChild(o)});startBtn.disabled=list.length===0;if(list.length===0)setStatus('Интерфейсы не найдены',true);}catch(e){setStatus('Ошибка загрузки интерфейсов',true)}}async function setAuto(){try{const a=await autoiface();if(a){let found=false;for(const opt of iface.options){if(opt.value===a){iface.value=a;found=true;break}}if(!found){const o=document.createElement('option');o.value=a;o.textContent=a;iface.appendChild(o);iface.value=a}}}catch(e){}}async function refresh(){try{const s=await stats();$('pkts').textContent=s.pkts_total||0;$('bytes').textContent=s.bytes_total||0;$('tcp').textContent=s.pkts_tcp||0;$('udp').textContent=s.pkts_udp||0;$('icmp').textContent=s.pkts_icmp||0;$('pps').textContent=(s.pps||0).toFixed? (s.pps).toFixed(2):s.pps;$('bps').textContent=(s.bps||0).toFixed? (s.bps).toFixed(2):s.bps;const st=await state();setStatus(st.running? 'Статус: запущен':'Статус: остановлен',false);if(pps.length>120){pps.shift();bps.shift()}pps.push(s.pps||0);bps.push(s.bps||0);draw();const sm=await summary();const list=$('toplist');list.innerHTML='';(sm.top_ips||[]).forEach(it=>{const row=document.createElement('div');row.className='toprow';row.innerHTML=`<div>${it.ip}</div><div class="muted">${it.pkts} pkts • ${it.bytes} bytes</div>`;list.appendChild(row)})}catch(e){}}async function start(){const bpf=$('bpf');const p=new URLSearchParams();const auto=bpf.value&&bpf.value.trim().length? bpf.value.trim(): presetToBpf(mode.value);p.set('iface',iface.value||'');p.set('bpf',auto);p.set('snaplen',$('snaplen').value||'65535');p.set('timeout',$('timeout').value||'1000');p.set('promisc',$('promisc').checked?'1':'0');p.set('monitor',$('monitor').checked?'1':'0');p.set('pcap_input',$('pcap_in').value||'');p.set('pcap_output',$('pcap_out').value||'');p.set('geoip',$('geoip').value||'');const r=await fetch('/api/start',{method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded'},body:p.toString()});if(!r.ok){const txt=await r.text();setStatus('Ошибка запуска: '+txt,true);alert('Ошибка: '+txt)}else{setStatus('Статус: запущен',false)}}async function stop(){await fetch('/api/stop',{method:'POST'});setStatus('Статус: остановлен',false)}$('start').addEventListener('click',start);$('stop').addEventListener('click',stop);$('autoface').addEventListener('click',setAuto);(async()=>{await fillIfaces();await setAuto();await refresh();setInterval(refresh,1000)})()})JS";

static volatile std::sig_atomic_t g_stop = 0;
static void on_sigint(int){g_stop=1;}

struct ServerState{std::mutex m;std::shared_ptr<CaptureSession> session;Config cfg;bool running=false;std::shared_ptr<Analyzer> analyzer;std::map<std::string,unsigned long long> ip_bytes;std::map<std::string,unsigned long long> ip_pkts;};

class WebAnalyzer: public Analyzer{public:explicit WebAnalyzer(ServerState* st):st_(st){}void on_packet(const PacketInfo& info,const u_char*,std::size_t length) override{std::lock_guard<std::mutex> lk(st_->m);if(info.src_ip){st_->ip_bytes[*info.src_ip]+=length;st_->ip_pkts[*info.src_ip]++;}if(info.dst_ip){st_->ip_bytes[*info.dst_ip]+=length;st_->ip_pkts[*info.dst_ip]++;}}void on_stats(const StatsSnapshot&) override{}private:ServerState* st_;};

static std::string http_ok(const std::string& ct,const std::string& body){std::ostringstream o;o<<"HTTP/1.1 200 OK\r\nContent-Type: "<<ct<<"\r\nContent-Length: "<<body.size()<<"\r\nConnection: close\r\n\r\n"<<body;return o.str();}
static std::string http_err(int code,const std::string& msg){std::ostringstream o;o<<"HTTP/1.1 "<<code<<" Error\r\nContent-Type: text/plain; charset=utf-8\r\nContent-Length: "<<msg.size()<<"\r\nConnection: close\r\n\r\n"<<msg;return o.str();}

static std::string url_decode(const std::string& s){std::string r;for(size_t i=0;i<s.size();++i){if(s[i]=='+')r.push_back(' ');else if(s[i]=='%'&&i+2<s.size()){char h1=s[i+1],h2=s[i+2];auto hex=[&](char c){if(c>='0'&&c<='9')return c-'0';if(c>='a'&&c<='f')return 10+c-'a';if(c>='A'&&c<='F')return 10+c-'A';return 0;};r.push_back((char)((hex(h1)<<4)|hex(h2)));i+=2;}else r.push_back(s[i]);}return r;}

static std::map<std::string,std::string> parse_form(const std::string& body){std::map<std::string,std::string> kv;size_t pos=0;while(pos<body.size()){size_t eq=body.find('=',pos);if(eq==std::string::npos)break;size_t amp=body.find('&',eq+1);std::string k=url_decode(body.substr(pos,eq-pos));std::string v=url_decode(body.substr(eq+1, amp==std::string::npos? std::string::npos: amp-(eq+1)));kv[k]=v;if(amp==std::string::npos)break;pos=amp+1;}return kv;}

static std::string list_devices_json(){char errbuf[PCAP_ERRBUF_SIZE]={0};pcap_if_t* alld=nullptr;std::vector<std::string> names; if(pcap_findalldevs(&alld,errbuf)==0){for(pcap_if_t* d=alld;d;d=d->next){if(d->name) names.emplace_back(d->name);}pcap_freealldevs(alld);}std::ostringstream out;out<<"[";for(size_t i=0;i<names.size();++i){out<<"\""<<names[i]<<"\"";if(i+1<names.size()) out<<",";}out<<"]";return out.str();}

static std::string auto_iface_name(){char errbuf[PCAP_ERRBUF_SIZE]={0};pcap_if_t* alld=nullptr;std::string dev; if(pcap_findalldevs(&alld,errbuf)==0){for(pcap_if_t* d=alld;d;d=d->next){if(d->name && !(d->flags & PCAP_IF_LOOPBACK)){dev=d->name;break;}}if(dev.empty() && alld && alld->name) dev=alld->name;pcap_freealldevs(alld);}return dev;}

static bool read_http_request(int cs,std::string& req){timeval tv{5,0};setsockopt(cs,SOL_SOCKET,SO_RCVTIMEO,&tv,sizeof(tv));char buf[4096];size_t cap=0;while(cap<65536){ssize_t n=recv(cs,buf,sizeof(buf),0);if(n<0){if(errno==EINTR) continue;return false;}if(n==0) break;req.append(buf,buf+n);cap+=n;if(req.find("\r\n\r\n")!=std::string::npos) break;}return !req.empty();}

static void parse_request_line(const std::string& req,std::string& method,std::string& path){size_t p1=req.find(' ');size_t p2=p1==std::string::npos? std::string::npos: req.find(' ',p1+1);if(p1!=std::string::npos&&p2!=std::string::npos){method=req.substr(0,p1);path=req.substr(p1+1,p2-p1-1);}else{method="";path="";}}

static size_t find_header_end(const std::string& req){size_t p=req.find("\r\n\r\n");return p==std::string::npos? req.size(): p+4;}

static std::string stats_json(const StatsSnapshot& s){std::ostringstream o;std::uint64_t now=std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();double secs=(s.started_ts_usec? (now-s.started_ts_usec)/1e6:0.0);if(secs<=0)secs=1;double pps=s.pkts_total/secs;double bps=(s.bytes_total*8.0)/secs;o<<"{";o<<"\"pkts_total\":"<<s.pkts_total<<",";o<<"\"bytes_total\":"<<s.bytes_total<<",";o<<"\"pkts_tcp\":"<<s.pkts_tcp<<",";o<<"\"pkts_udp\":"<<s.pkts_udp<<",";o<<"\"pkts_icmp\":"<<s.pkts_icmp<<",";o<<"\"pps\":"<<pps<<",";o<<"\"bps\":"<<bps;o<<"}";return o.str();}

static std::string summary_json(ServerState* st){std::vector<std::pair<std::string,unsigned long long>> top;{std::lock_guard<std::mutex> lk(st->m);for(auto& kv: st->ip_bytes){top.emplace_back(kv.first,kv.second);} }
    std::sort(top.begin(),top.end(),[](auto&a,auto&b){return a.second>b.second;}); if(top.size()>10) top.resize(10);
    std::ostringstream o;o<<"{\"top_ips\":[";for(size_t i=0;i<top.size();++i){const auto& it=top[i];unsigned long long pk=0;{std::lock_guard<std::mutex> lk(st->m);auto itp=st->ip_pkts.find(it.first);if(itp!=st->ip_pkts.end()) pk=itp->second;}o<<"{\"ip\":\""<<it.first<<"\",\"bytes\":"<<it.second<<",\"pkts\":"<<pk<<"}";if(i+1<top.size())o<<",";}o<<"]}";return o.str();}

static std::string devices_json(){return list_devices_json();}

static void serve_client(int cs,ServerState* st){std::string req;if(!read_http_request(cs,req)){close(cs);return;}std::string method,path;parse_request_line(req,method,path);std::string resp;size_t hdr_end=find_header_end(req);std::string body=req.substr(hdr_end);
    if(method=="GET"&&path=="/") resp=http_ok("text/html; charset=utf-8",INDEX_HTML);
    else if(method=="GET"&&path=="/static/styles.css") resp=http_ok("text/css; charset=utf-8",STYLES_CSS);
    else if(method=="GET"&&path=="/static/app.js") resp=http_ok("application/javascript; charset=utf-8",APP_JS);
    else if(method=="GET"&&path=="/api/devices") resp=http_ok("application/json",devices_json());
    else if(method=="GET"&&path=="/api/auto_iface") resp=http_ok("text/plain; charset=utf-8",auto_iface_name());
    else if(method=="GET"&&path=="/api/state"){bool running=false;{std::lock_guard<std::mutex> lk(st->m);running=st->running;}std::ostringstream o;o<<"{\"running\":"<<(running?"true":"false")<<"}";resp=http_ok("application/json",o.str());}
    else if(method=="GET"&&path=="/api/stats"){StatsSnapshot s;{std::lock_guard<std::mutex> lk(st->m);if(st->session) s=st->session->stats();}resp=http_ok("application/json",stats_json(s));}
    else if(method=="GET"&&path=="/api/summary"){resp=http_ok("application/json",summary_json(st));}
    else if(method=="POST"&&path=="/api/start"){std::map<std::string,std::string> kv=parse_form(body);std::lock_guard<std::mutex> lk(st->m);if(st->running){resp=http_err(409,"already running");}
        else{try{Config cfg;cfg.interface=kv["iface"];if(kv.count("bpf")&&kv["bpf"].size())cfg.bpf=kv["bpf"];if(kv.count("snaplen"))cfg.snaplen=std::max(64, std::atoi(kv["snaplen"].c_str()));if(kv.count("timeout"))cfg.timeout_ms=std::max(0, std::atoi(kv["timeout"].c_str()));cfg.promisc=kv["promisc"]=="1";cfg.monitor=kv["monitor"]=="1";if(kv.count("pcap_input")&&kv["pcap_input"].size())cfg.pcap_input=kv["pcap_input"];if(kv.count("pcap_output")&&kv["pcap_output"].size())cfg.pcap_output=kv["pcap_output"];std::shared_ptr<Analyzer> an(new WebAnalyzer(st));st->ip_bytes.clear();st->ip_pkts.clear();st->analyzer=an;st->cfg=cfg;st->session=std::make_shared<CaptureSession>(cfg);if(cfg.pcap_input.has_value()){std::thread([st]{st->running=true;st->session->run(st->analyzer);std::lock_guard<std::mutex> lk2(st->m);st->running=false;}).detach();}else{st->session->start(an);st->running=true;}resp=http_ok("text/plain","ok");}catch(const std::exception& e){resp=http_err(500,e.what());}}}
    else if(method=="POST"&&path=="/api/stop"){std::lock_guard<std::mutex> lk(st->m);if(st->session){st->session->stop();st->session.reset();st->running=false;}resp=http_ok("text/plain","ok");}
    else resp=http_err(404,"not found");
    if(!resp.empty()) {
        ssize_t off=0; const char* p=resp.data(); ssize_t len=(ssize_t)resp.size();
        while(off<len){ ssize_t w=send(cs,p+off,(size_t)(len-off),MSG_NOSIGNAL); if(w<=0) break; off+=w; }
    }
    close(cs);
}

static void server_loop(unsigned short port,ServerState* st){int s=socket(AF_INET,SOCK_STREAM,0);int opt=1;setsockopt(s,SOL_SOCKET,SO_REUSEADDR,&opt,sizeof(opt));sockaddr_in addr{};addr.sin_family=AF_INET;addr.sin_port=htons(port);addr.sin_addr.s_addr=htonl(INADDR_LOOPBACK);bind(s,(sockaddr*)&addr,sizeof(addr));listen(s,16);while(!g_stop){sockaddr_in ca{};socklen_t cl=sizeof(ca);int cs=accept(s,(sockaddr*)&ca,&cl);if(cs<0){if(errno==EINTR)break;continue;}std::thread(serve_client,cs,st).detach();}close(s);} 

int main(){std::signal(SIGINT,on_sigint);std::signal(SIGTERM,on_sigint);ServerState st;std::thread srv(server_loop,8080,&st);std::this_thread::sleep_for(std::chrono::milliseconds(300));std::system("xdg-open http://127.0.0.1:8080 > /dev/null 2>&1");while(!g_stop) std::this_thread::sleep_for(std::chrono::milliseconds(200));{std::lock_guard<std::mutex> lk(st.m);if(st.session){st.session->stop();st.session.reset();}}if(srv.joinable()) srv.join();return 0;}
